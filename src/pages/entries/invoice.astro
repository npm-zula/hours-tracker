---
import Layout from '../../layouts/Layout.astro';
import { supabase } from '../../lib/supabase';

// Fetch projects for the select input
const { data: projects } = await supabase
  .from('projects')
  .select('*')
  .order('name');

// Get current date for default value
const now = new Date();
const defaultEndDate = now.toISOString().split('T')[0];
const defaultStartDate = new Date(now.setDate(now.getDate() - 7)).toISOString().split('T')[0];
---

<Layout title="Generate Invoice">
  <div class="max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14 mx-auto">
    <div class="max-w-xl mx-auto">
      <!-- Page Header -->
      <div class="mb-8">
        <h1 class="text-2xl font-bold text-gray-800">Generate Invoice</h1>
        <p class="text-sm text-gray-600 mt-1">Create a professional invoice for your work</p>
      </div>

      <!-- Form Card -->
      <div class="bg-white border border-gray-200 rounded-xl shadow-sm p-4 md:p-6">
        <form id="invoice-form" class="space-y-6">
          <!-- Project Selection -->
          <div>
            <label class="block text-sm font-medium mb-2 text-gray-800">Projects</label>
            <div class="relative">
              <div id="project-select" class="border border-gray-200 rounded-lg overflow-hidden">
                <div class="p-2 bg-gray-50 border-b border-gray-200">
                  <input
                    type="text"
                    id="project-search"
                    placeholder="Search projects..."
                    class="w-full px-3 py-2 text-sm border border-gray-200 rounded-md focus:border-blue-500 focus:ring-blue-500"
                  />
                </div>
                <div class="max-h-60 overflow-y-auto">
                  {projects?.map((project) => (
                    <label class="flex items-center px-4 py-3 hover:bg-gray-50 cursor-pointer border-b border-gray-200 last:border-b-0">
                      <input
                        type="checkbox"
                        name="project_ids"
                        value={project.id}
                        class="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                      />
                      <span class="ml-3 text-sm text-gray-800">{project.name}</span>
                      {project.rate_per_hour && (
                        <span class="ml-2 text-sm text-gray-500">(${project.rate_per_hour}/hr)</span>
                      )}
                    </label>
                  ))}
                </div>
              </div>
              <div id="selected-projects" class="mt-2 flex flex-wrap gap-2">
                <!-- Selected project tags will be inserted here by JavaScript -->
              </div>
            </div>
          </div>

          <!-- Date Range -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <!-- Start Date -->
            <div>
              <label for="start_date" class="block text-sm font-medium mb-2 text-gray-800">Start Date</label>
              <div class="relative">
                <input
                  type="text"
                  id="start_date"
                  name="start_date"
                  required
                  value={defaultStartDate}
                  class="py-3 px-4 pe-9 block w-full border-gray-200 rounded-lg text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none"
                  data-hs-datepicker='{"format": "YYYY-MM-DD"}'
                  placeholder="YYYY-MM-DD"
                />
                <div class="absolute inset-y-0 end-0 flex items-center pointer-events-none pe-3">
                  <svg class="flex-shrink-0 h-4 w-4 text-gray-500" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <rect x="3" y="4" width="18" height="18" rx="2" ry="2"/>
                    <line x1="16" y1="2" x2="16" y2="6"/>
                    <line x1="8" y1="2" x2="8" y2="6"/>
                    <line x1="3" y1="10" x2="21" y2="10"/>
                  </svg>
                </div>
              </div>
            </div>

            <!-- End Date -->
            <div>
              <label for="end_date" class="block text-sm font-medium mb-2 text-gray-800">End Date</label>
              <div class="relative">
                <input
                  type="text"
                  id="end_date"
                  name="end_date"
                  required
                  value={defaultEndDate}
                  class="py-3 px-4 pe-9 block w-full border-gray-200 rounded-lg text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none"
                  data-hs-datepicker='{"format": "YYYY-MM-DD"}'
                  placeholder="YYYY-MM-DD"
                />
                <div class="absolute inset-y-0 end-0 flex items-center pointer-events-none pe-3">
                  <svg class="flex-shrink-0 h-4 w-4 text-gray-500" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <rect x="3" y="4" width="18" height="18" rx="2" ry="2"/>
                    <line x1="16" y1="2" x2="16" y2="6"/>
                    <line x1="8" y1="2" x2="8" y2="6"/>
                    <line x1="3" y1="10" x2="21" y2="10"/>
                  </svg>
                </div>
              </div>
            </div>
          </div>

          <!-- Quick Date Ranges -->
          <div>
            <label class="block text-sm font-medium mb-2 text-gray-800">Quick Select</label>
            <div class="flex flex-wrap gap-2">
              <button
                type="button"
                class="py-2 px-3 inline-flex items-center gap-x-2 text-sm font-medium rounded-lg border border-gray-200 bg-white text-gray-800 shadow-sm hover:bg-gray-50 disabled:opacity-50 disabled:pointer-events-none date-range-button"
                data-days="7"
              >
                Last 7 days
              </button>
              <button
                type="button"
                class="py-2 px-3 inline-flex items-center gap-x-2 text-sm font-medium rounded-lg border border-gray-200 bg-white text-gray-800 shadow-sm hover:bg-gray-50 disabled:opacity-50 disabled:pointer-events-none date-range-button"
                data-days="14"
              >
                Last 14 days
              </button>
              <button
                type="button"
                class="py-2 px-3 inline-flex items-center gap-x-2 text-sm font-medium rounded-lg border border-gray-200 bg-white text-gray-800 shadow-sm hover:bg-gray-50 disabled:opacity-50 disabled:pointer-events-none date-range-button"
                data-days="30"
              >
                Last 30 days
              </button>
            </div>
          </div>

          <!-- Invoice Details -->
          <div class="space-y-4">
            <div>
              <label for="invoice_number" class="block text-sm font-medium mb-2 text-gray-800">Invoice Number</label>
              <input
                type="text"
                id="invoice_number"
                name="invoice_number"
                required
                class="py-3 px-4 block w-full border-gray-200 rounded-lg text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none"
                placeholder="e.g., INV-001"
              />
            </div>

            <div>
              <label for="due_date" class="block text-sm font-medium mb-2 text-gray-800">Due Date</label>
              <div class="relative">
                <input
                  type="text"
                  id="due_date"
                  name="due_date"
                  required
                  class="py-3 px-4 pe-9 block w-full border-gray-200 rounded-lg text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none"
                  data-hs-datepicker='{"format": "YYYY-MM-DD"}'
                  placeholder="YYYY-MM-DD"
                />
                <div class="absolute inset-y-0 end-0 flex items-center pointer-events-none pe-3">
                  <svg class="flex-shrink-0 h-4 w-4 text-gray-500" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <rect x="3" y="4" width="18" height="18" rx="2" ry="2"/>
                    <line x1="16" y1="2" x2="16" y2="6"/>
                    <line x1="8" y1="2" x2="8" y2="6"/>
                    <line x1="3" y1="10" x2="21" y2="10"/>
                  </svg>
                </div>
              </div>
            </div>

            <div>
              <label for="notes" class="block text-sm font-medium mb-2 text-gray-800">Notes</label>
              <textarea
                id="notes"
                name="notes"
                rows="3"
                class="py-3 px-4 block w-full border-gray-200 rounded-lg text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none"
                placeholder="Additional notes for the invoice (optional)"
              ></textarea>
            </div>
          </div>

          <!-- Form Actions -->
          <div class="mt-8 flex items-center justify-end gap-x-4">
            <a
              href="/entries"
              class="py-2 px-3 inline-flex items-center gap-x-2 text-sm font-medium rounded-lg border border-gray-200 bg-white text-gray-800 shadow-sm hover:bg-gray-50 disabled:opacity-50 disabled:pointer-events-none"
            >
              Cancel
            </a>
            <button
              type="submit"
              class="py-2 px-3 inline-flex items-center gap-x-2 text-sm font-semibold rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none"
            >
              <svg class="flex-shrink-0 w-4 h-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                <polyline points="7 10 12 15 17 10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
              Generate Invoice
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { supabase } from '../../lib/supabase';
  import 'preline/preline';
  import jsPDF from 'jspdf';
  import 'jspdf-autotable';
  import { HSStaticMethods } from 'preline';

  // Initialize Preline
  HSStaticMethods.autoInit();

  const form = document.getElementById('invoice-form') as HTMLFormElement;
  const startDateInput = document.getElementById('start_date') as HTMLInputElement;
  const endDateInput = document.getElementById('end_date') as HTMLInputElement;
  const projectSearch = document.getElementById('project-search') as HTMLInputElement;
  const selectedProjectsContainer = document.getElementById('selected-projects') as HTMLDivElement;

  // Handle project search
  projectSearch?.addEventListener('input', (e) => {
    const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
    const projectLabels = document.querySelectorAll('#project-select label');
    
    projectLabels.forEach((label) => {
      const projectName = label.textContent?.toLowerCase() || '';
      if (projectName.includes(searchTerm)) {
        (label as HTMLElement).style.display = '';
      } else {
        (label as HTMLElement).style.display = 'none';
      }
    });
  });

  // Handle project selection
  const updateSelectedProjects = () => {
    const selectedCheckboxes = document.querySelectorAll('#project-select input[type="checkbox"]:checked');
    selectedProjectsContainer.innerHTML = '';

    selectedCheckboxes.forEach((checkbox) => {
      const label = checkbox.parentElement;
      const projectName = label?.querySelector('span')?.textContent || '';
      
      const tag = document.createElement('div');
      tag.className = 'inline-flex items-center gap-x-1 py-1 px-2 text-sm font-medium bg-blue-100 text-blue-800 rounded-md';
      tag.innerHTML = `
        ${projectName}
        <button type="button" class="remove-project text-blue-600 hover:text-blue-800" data-project-id="${(checkbox as HTMLInputElement).value}">
          <svg class="w-3 h-3" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M6 18L18 6M6 6l12 12"/>
          </svg>
        </button>
      `;
      selectedProjectsContainer.appendChild(tag);
    });

    // Add click handlers for remove buttons
    document.querySelectorAll('.remove-project').forEach((button) => {
      button.addEventListener('click', (e) => {
        const projectId = (e.currentTarget as HTMLElement).dataset.projectId;
        const checkbox = document.querySelector(`input[value="${projectId}"]`) as HTMLInputElement;
        if (checkbox) {
          checkbox.checked = false;
          updateSelectedProjects();
        }
      });
    });
  };

  // Add change event listener to checkboxes
  document.querySelectorAll('#project-select input[type="checkbox"]').forEach((checkbox) => {
    checkbox.addEventListener('change', updateSelectedProjects);
  });

  // Handle quick date range buttons
  document.querySelectorAll('.date-range-button').forEach(button => {
    button.addEventListener('click', () => {
      const days = parseInt((button as HTMLElement).dataset.days || '7');
      const end = new Date();
      const start = new Date();
      start.setDate(end.getDate() - days);
      
      endDateInput.value = end.toISOString().split('T')[0];
      startDateInput.value = start.toISOString().split('T')[0];
    });
  });

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    const projectIds = formData.getAll('project_ids') as string[];
    const startDate = formData.get('start_date') as string;
    const endDate = formData.get('end_date') as string;
    const invoiceNumber = formData.get('invoice_number') as string;
    const dueDate = formData.get('due_date') as string;
    const notes = formData.get('notes') as string;

    // Validate dates
    if (new Date(endDate) <= new Date(startDate)) {
      alert('End date must be after start date');
      return;
    }

    try {
      // Fetch project details
      const { data: projects } = await supabase
        .from('projects')
        .select('*')
        .in('id', projectIds);

      if (!projects?.length) {
        throw new Error('No projects found');
      }

      let totalHours = 0;
      let totalAmount = 0;
      const allEntries = [];

      // Fetch time entries for all selected projects
      for (const project of projects) {
        const { data: entries } = await supabase
          .from('time_entries')
          .select('*')
          .eq('project_id', project.id)
          .gte('start_time', `${startDate}T00:00:00`)
          .lte('start_time', `${endDate}T23:59:59`)
          .order('start_time');

        if (entries) {
          for (const entry of entries) {
            const duration = (new Date(entry.end_time).getTime() - new Date(entry.start_time).getTime()) / (1000 * 60 * 60);
            totalHours += duration;
            if (project.rate_per_hour) {
              totalAmount += duration * project.rate_per_hour;
            }
            allEntries.push({ ...entry, project });
          }
        }
      }

      // Generate PDF
      const doc = new jsPDF();
      const margin = 20;
      let y = margin;

      // Add invoice header
      doc.setFontSize(24);
      doc.setTextColor(40, 40, 40);
      doc.text('INVOICE', margin, y);

      // Add invoice details
      y += 20;
      doc.setFontSize(12);
      doc.text(`Invoice Number: ${invoiceNumber}`, margin, y);
      y += 10;
      doc.text(`Date Range: ${startDate} to ${endDate}`, margin, y);
      y += 10;
      doc.text(`Due Date: ${dueDate}`, margin, y);

      // Add project details
      y += 20;
      doc.setFontSize(14);
      doc.setTextColor(60, 60, 60);
      doc.text('Projects:', margin, y);

      // List all projects
      y += 10;
      doc.setFontSize(10);
      doc.setTextColor(90, 90, 90);
      for (const project of projects) {
        y += 8;
        doc.text(`${project.name}${project.description ? ` - ${project.description}` : ''}`, margin + 10, y);
      }

      // Add time entries table
      y += 20;
      (doc as any).autoTable({
        startY: y,
        head: [['Date', 'Project', 'Description', 'Hours', 'Amount']],
        body: allEntries.map(entry => {
          const startTime = new Date(entry.start_time);
          const endTime = new Date(entry.end_time);
          const duration = entry.end_time
            ? (endTime.getTime() - startTime.getTime()) / (1000 * 60 * 60)
            : 0;
          const amount = entry.project.rate_per_hour ? duration * entry.project.rate_per_hour : 0;

          return [
            startTime.toLocaleDateString(),
            entry.project.name,
            entry.description,
            `${duration.toFixed(2)}h`,
            entry.project.rate_per_hour ? `$${amount.toFixed(2)}` : '-'
          ];
        }),
        theme: 'striped',
        styles: { fontSize: 9 },
        margin: { top: 20, right: margin, bottom: 20, left: margin }
      });

      // Add totals
      const finalY = (doc as any).lastAutoTable.finalY + 20;
      doc.setFontSize(12);
      doc.setTextColor(40, 40, 40);
      doc.text(`Total Hours: ${totalHours.toFixed(2)}h`, margin, finalY);
      if (totalAmount > 0) {
        doc.text(`Total Amount: $${totalAmount.toFixed(2)}`, margin, finalY + 10);
      }

      // Add notes if provided
      if (notes) {
        doc.setFontSize(10);
        doc.setTextColor(90, 90, 90);
        doc.text('Notes:', margin, finalY + 30);
        doc.text(notes, margin + 10, finalY + 40);
      }

      // Save the PDF
      doc.save(`invoice-${invoiceNumber}.pdf`);

    } catch (error) {
      console.error('Error generating invoice:', error);
      alert('Error generating invoice. Please try again.');
    }
  });
</script> 