---

import Layout from '../../layouts/Layout.astro';
import { supabase } from '../../lib/supabase';

const { data: projects } = await supabase
  .from('projects')
  .select('*')
  .order('name');

// Set default times
const now = new Date();
const startTime = new Date(now);
startTime.setHours(now.getHours() - 2); // 2 hours ago
const endTime = new Date(now);

// Format for datetime-local input
const formatDateTime = (date: Date) => {
  return date.toISOString().slice(0, 16); // Format: YYYY-MM-DDThh:mm
};

---

<Layout title="New Time Entry | Hours Tracker">
  <div class="max-w-2xl mx-auto">
    <div class="flex items-center justify-between mb-8">
      <h1 class="text-2xl font-bold text-primary-800">New Time Entry</h1>
      <a href="/entries" class="btn btn-secondary">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
        Back to Entries
      </a>
    </div>

    <form
      class="card p-6 space-y-6"
      id="timeEntryForm"
    >
      <div class="space-y-2">
        <label for="project" class="block text-sm font-medium text-gray-700">
          Project
        </label>
        <select
          id="project"
          name="project_id"
          required
          class="block w-full"
        >
          <option value="">Select a project</option>
          {projects?.map((project) => (
            <option value={project.id}>{project.name}</option>
          ))}
        </select>
      </div>

      <div class="space-y-2">
        <label for="description" class="block text-sm font-medium text-gray-700">
          Description
        </label>
        <textarea
          id="description"
          name="description"
          rows="3"
          required
          placeholder="What did you work on?"
          class="block w-full"
        ></textarea>
      </div>

      <div class="grid grid-cols-2 gap-6">
        <div class="space-y-2">
          <label for="startTime" class="block text-sm font-medium text-gray-700">
            Start Time
          </label>
          <input
            type="datetime-local"
            id="startTime"
            name="start_time"
            value={formatDateTime(startTime)}
            required
            class="block w-full"
          />
        </div>

        <div class="space-y-2">
          <label for="endTime" class="block text-sm font-medium text-gray-700">
            End Time
          </label>
          <input
            type="datetime-local"
            id="endTime"
            name="end_time"
            value={formatDateTime(endTime)}
            class="block w-full"
          />
        </div>
      </div>

      <div class="flex justify-end space-x-4 pt-4 border-t">
        <button
          type="submit"
          class="btn btn-primary"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
          </svg>
          Save Entry
        </button>
      </div>
    </form>
  </div>
</Layout>

<script>
  const form = document.getElementById('timeEntryForm');
  
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const submitButton = form.querySelector('button[type="submit"]');
    if (submitButton) {
      submitButton.disabled = true;
      submitButton.innerHTML = `
        <svg class="animate-spin h-5 w-5 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Saving...
      `;
    }
    
    const formData = new FormData(e.target as HTMLFormElement);
    
    const entry = {
      project_id: formData.get('project_id'),
      description: formData.get('description'),
      start_time: new Date(formData.get('start_time') as string).toISOString(),
      end_time: formData.get('end_time')
        ? new Date(formData.get('end_time') as string).toISOString()
        : null,
    };

    try {
      const response = await fetch('/api/time-entries', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(entry),
      });

      if (response.ok) {
        window.location.href = '/entries';
      } else {
        throw new Error('Failed to create time entry');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Failed to create time entry. Please try again.');
      if (submitButton) {
        submitButton.disabled = false;
        submitButton.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
          </svg>
          Save Entry
        `;
      }
    }
  });
</script> 