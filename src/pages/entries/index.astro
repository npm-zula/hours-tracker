---
import Layout from '../../layouts/Layout.astro';
import { supabase } from '../../lib/supabase';
import type { TimeEntry } from '../../lib/supabase';

const { data: entries = [] } = await supabase
  .from('time_entries')
  .select(`
    *,
    project:projects(name, rate_per_hour)
  `).order('start_time', { ascending: false }) as { data: TimeEntry[] };

// Calculate total hours and earnings
const totals = entries.reduce((acc, entry) => {
  if (entry.end_time) {
    const duration = (new Date(entry.end_time).getTime() - new Date(entry.start_time).getTime()) / (1000 * 60 * 60);
    acc.hours += duration;
    if (entry.project?.rate_per_hour) {
      acc.earnings += duration * entry.project.rate_per_hour;
    }
  }
  return acc;
}, { hours: 0, earnings: 0 });
---

<Layout title="Time Entries">
  <!-- Page Header -->
  <div class="flex flex-col gap-4 md:flex-row md:items-center md:justify-between mb-8">
    <div>
      <h1 class="text-2xl font-bold text-gray-800">Time Entries</h1>
      <p class="text-sm text-gray-600 mt-1">Manage your time entries and track your work</p>
    </div>
    <div class="flex flex-col sm:flex-row gap-3">
      <!-- Filter Button -->
      <div class="hs-dropdown relative inline-flex">
        <button type="button" class="py-3 px-4 inline-flex items-center gap-x-2 text-sm font-semibold rounded-lg border border-gray-200 bg-white text-gray-800 shadow-sm hover:bg-gray-50 disabled:opacity-50 disabled:pointer-events-none">
          <svg class="flex-shrink-0 w-4 h-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M3 6h18"/>
            <path d="M7 12h10"/>
            <path d="M10 18h4"/>
          </svg>
          Filter
          <svg class="flex-shrink-0 w-4 h-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="m6 9 6 6 6-6"/>
          </svg>
        </button>
        <div class="hs-dropdown-menu transition-[opacity,margin] duration hs-dropdown-open:opacity-100 opacity-0 hidden min-w-60 bg-white shadow-md rounded-lg p-2 mt-2 after:h-4 after:absolute after:-bottom-4 after:start-0 after:w-full before:h-4 before:absolute before:-top-4 before:start-0 before:w-full">
          <div class="px-4 py-3 border-b">
            <p class="text-sm font-semibold text-gray-800">Filter Options</p>
          </div>
          <!-- Add filter options here -->
        </div>
      </div>

      <!-- New Entry Button -->
      <a href="/entries/new" class="py-3 px-4 inline-flex items-center gap-x-2 text-sm font-semibold rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none">
        <svg class="flex-shrink-0 w-4 h-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M12 5v14M5 12h14"/>
        </svg>
        New Entry
      </a>
    </div>
  </div>

  <!-- Summary Cards -->
  <div class="grid sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
    <!-- Total Hours -->
    <div class="flex flex-col bg-white border shadow-sm rounded-xl">
      <div class="p-4 md:p-5">
        <div class="flex items-center gap-x-2">
          <span class="text-xs font-semibold uppercase text-gray-600">Total Hours</span>
        </div>
        <div class="mt-1">
          <h3 class="text-xl sm:text-2xl font-medium text-gray-800">
            {totals.hours.toFixed(1)}h
          </h3>
        </div>
      </div>
    </div>

    <!-- Total Earnings -->
    <div class="flex flex-col bg-white border shadow-sm rounded-xl">
      <div class="p-4 md:p-5">
        <div class="flex items-center gap-x-2">
          <span class="text-xs font-semibold uppercase text-gray-600">Total Earnings</span>
        </div>
        <div class="mt-1">
          <h3 class="text-xl sm:text-2xl font-medium text-green-600">
            ${totals.earnings.toFixed(2)}
          </h3>
        </div>
      </div>
    </div>
  </div>

  <!-- Time Entries Table -->
  <div class="flex flex-col">
    <div class="-m-1.5 overflow-x-auto">
      <div class="p-1.5 min-w-full inline-block align-middle">
        <div class="bg-white border border-gray-200 rounded-xl shadow-sm overflow-hidden">
          <!-- Table -->
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th scope="col" class="px-6 py-3 text-start">
                  <div class="flex items-center gap-x-2">
                    <span class="text-xs font-semibold uppercase tracking-wide text-gray-800">
                      Project
                    </span>
                  </div>
                </th>
                <th scope="col" class="px-6 py-3 text-start">
                  <div class="flex items-center gap-x-2">
                    <span class="text-xs font-semibold uppercase tracking-wide text-gray-800">
                      Description
                    </span>
                  </div>
                </th>
                <th scope="col" class="px-6 py-3 text-start">
                  <div class="flex items-center gap-x-2">
                    <span class="text-xs font-semibold uppercase tracking-wide text-gray-800">
                      Start Time
                    </span>
                  </div>
                </th>
                <th scope="col" class="px-6 py-3 text-start">
                  <div class="flex items-center gap-x-2">
                    <span class="text-xs font-semibold uppercase tracking-wide text-gray-800">
                      End Time
                    </span>
                  </div>
                </th>
                <th scope="col" class="px-6 py-3 text-start">
                  <div class="flex items-center gap-x-2">
                    <span class="text-xs font-semibold uppercase tracking-wide text-gray-800">
                      Duration
                    </span>
                  </div>
                </th>
                <th scope="col" class="px-6 py-3 text-start">
                  <div class="flex items-center gap-x-2">
                    <span class="text-xs font-semibold uppercase tracking-wide text-gray-800">
                      Amount
                    </span>
                  </div>
                </th>
                <th scope="col" class="px-6 py-3 text-end"></th>
              </tr>
            </thead>

            <tbody class="divide-y divide-gray-200">
              {entries.map((entry) => {
                const startTime = new Date(entry.start_time);
                const endTime = entry.end_time ? new Date(entry.end_time) : null;
                const duration = endTime
                  ? (endTime.getTime() - startTime.getTime()) / (1000 * 60 * 60)
                  : null;
                const amount = duration && entry.project?.rate_per_hour
                  ? duration * entry.project.rate_per_hour
                  : null;

                return (
                  <tr class="hover:bg-gray-50">
                    <td class="h-px w-px whitespace-nowrap px-6 py-4">
                      <div class="text-sm text-gray-800">{entry.project?.name}</div>
                    </td>
                    <td class="h-px w-px whitespace-nowrap px-6 py-4">
                      <div class="text-sm text-gray-800">{entry.description}</div>
                    </td>
                    <td class="h-px w-px whitespace-nowrap px-6 py-4">
                      <div class="text-sm text-gray-800">{startTime.toLocaleString()}</div>
                    </td>
                    <td class="h-px w-px whitespace-nowrap px-6 py-4">
                      <div class="text-sm text-gray-800">
                        {endTime ? endTime.toLocaleString() : (
                          <span class="inline-flex items-center gap-x-1.5 py-1.5 px-3 rounded-full text-xs font-medium bg-blue-100 text-blue-800">In Progress</span>
                        )}
                      </div>
                    </td>
                    <td class="h-px w-px whitespace-nowrap px-6 py-4">
                      <div class="text-sm text-gray-800">
                        {duration ? `${duration.toFixed(1)}h` : '-'}
                      </div>
                    </td>
                    <td class="h-px w-px whitespace-nowrap px-6 py-4">
                      <div class="text-sm text-gray-800">
                        {amount ? `$${amount.toFixed(2)}` : '-'}
                      </div>
                    </td>
                    <td class="h-px w-px whitespace-nowrap px-6 py-4">
                      <div class="flex items-center justify-end gap-x-2">
                        {!entry.end_time && (
                          <button
                            type="button"
                            class="py-2 px-3 inline-flex items-center gap-x-2 text-sm font-medium rounded-lg border border-gray-200 bg-white text-gray-800 shadow-sm hover:bg-gray-50 disabled:opacity-50 disabled:pointer-events-none"
                          >
                            <svg class="flex-shrink-0 w-4 h-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                              <path d="M18.36 6.64A9 9 0 0 1 20.77 15"/>
                              <path d="M6.16 6.16a9 9 0 1 0 12.68 12.68"/>
                              <path d="M12 2v4"/>
                              <path d="m2 2 20 20"/>
                            </svg>
                            Stop
                          </button>
                        )}
                        <button
                          type="button"
                          class="py-2 px-3 inline-flex items-center gap-x-2 text-sm font-medium rounded-lg border border-gray-200 bg-white text-gray-800 shadow-sm hover:bg-gray-50 disabled:opacity-50 disabled:pointer-events-none"
                        >
                          <svg class="flex-shrink-0 w-4 h-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"/>
                            <path d="m15 5 4 4"/>
                          </svg>
                          Edit
                        </button>
                      </div>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
          <!-- End Table -->

          <!-- Footer -->
          <div class="px-6 py-4 grid gap-3 md:flex md:justify-between md:items-center border-t border-gray-200">
            <div>
              <p class="text-sm text-gray-600">
                Showing <span class="font-semibold text-gray-800">{entries.length}</span> entries
              </p>
            </div>

            <div>
              <div class="inline-flex gap-x-2">
                <button type="button" class="py-2 px-3 inline-flex items-center gap-x-2 text-sm font-medium rounded-lg border border-gray-200 bg-white text-gray-800 shadow-sm hover:bg-gray-50 disabled:opacity-50 disabled:pointer-events-none">
                  <svg class="flex-shrink-0 w-4 h-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="m15 18-6-6 6-6"/>
                  </svg>
                  Previous
                </button>
                <button type="button" class="py-2 px-3 inline-flex items-center gap-x-2 text-sm font-medium rounded-lg border border-gray-200 bg-white text-gray-800 shadow-sm hover:bg-gray-50 disabled:opacity-50 disabled:pointer-events-none">
                  Next
                  <svg class="flex-shrink-0 w-4 h-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="m9 18 6-6-6-6"/>
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { supabase } from '../../lib/supabase';

  // Handle stop timer button clicks
  document.querySelectorAll('button').forEach(button => {
    if (button.textContent?.trim() === 'Stop') {
      button.addEventListener('click', async () => {
        const row = button.closest('tr');
        const startTimeCell = row?.querySelector('td:nth-child(3)');
        const startTime = startTimeCell?.querySelector('.text-sm')?.textContent;
        
        if (startTime) {
          const { error } = await supabase
            .from('time_entries')
            .update({ end_time: new Date().toISOString() })
            .eq('start_time', new Date(startTime).toISOString());

          if (error) {
            alert('Error stopping timer: ' + error.message);
          } else {
            window.location.reload();
          }
        }
      });
    }
  });
</script> 