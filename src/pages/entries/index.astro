---
import Layout from '../../layouts/Layout.astro';
import { supabase } from '../../lib/supabase';
import type { TimeEntry } from '../../lib/supabase';
import BackButton from '../../components/BackButton.astro';
import EntriesStats from '../../components/EntriesStats.astro';

const { data: entries = [] } = await supabase
  .from('time_entries')
  .select(`
    *,
    project:projects(name, rate_per_hour)
  `).order('start_time', { ascending: false }) as { data: TimeEntry[] };
---

<Layout title="Time Entries">
  <div>
    <BackButton />
    <div class="space-y-8">
      <div class="flex justify-between items-center">
        <h1 class="text-2xl font-bold text-primary-800">Time Entries</h1>
        <div class="flex gap-4">
          <a
            href="/entries/invoice"
            class="btn btn-secondary"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            Generate Invoice
          </a>
          <a
            href="/entries/new"
            class="btn btn-primary"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
            </svg>
            New Entry
          </a>
        </div>
      </div>

      <!-- Statistics Dashboard -->
      <EntriesStats entries={entries || []} />

      <!-- Entries Table -->
      <div class="bg-white rounded-lg shadow overflow-hidden">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Project</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Start Time</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">End Time</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Duration</th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            {entries?.map((entry: TimeEntry) => {
              const startTime = new Date(entry.start_time);
              const endTime = entry.end_time ? new Date(entry.end_time) : null;
              const duration = endTime
                ? Math.round((endTime.getTime() - startTime.getTime()) / (1000 * 60))
                : null;

              return (
                <tr class="hover:bg-gray-50">
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                    {entry.project?.name}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {entry.description}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {startTime.toLocaleString()}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {endTime?.toLocaleString() || 'In Progress'}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {duration ? `${Math.floor(duration / 60)}h ${duration % 60}m` : '-'}
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
    </div>
  </div>
</Layout> 