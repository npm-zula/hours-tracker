---
import Layout from '../layouts/Layout.astro';
import Toast from '../components/Toast.astro';
---

<Layout title="Dashboard - Hours Tracker">
  <div class="space-y-8">
    <!-- Stats Overview -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
      <div class="bg-white dark:bg-gray-800 shadow-sm rounded-lg p-6">
        <h3 class="text-lg font-medium text-gray-900 dark:text-white">Total Hours</h3>
        <p class="mt-2 text-3xl font-bold text-indigo-600 dark:text-indigo-400" id="total-hours">
          0.00
        </p>
      </div>
      <div class="bg-white dark:bg-gray-800 shadow-sm rounded-lg p-6">
        <h3 class="text-lg font-medium text-gray-900 dark:text-white">Active Projects</h3>
        <p class="mt-2 text-3xl font-bold text-indigo-600 dark:text-indigo-400" id="project-count">
          0
        </p>
      </div>
      <div class="bg-white dark:bg-gray-800 shadow-sm rounded-lg p-6">
        <h3 class="text-lg font-medium text-gray-900 dark:text-white">Time Entries</h3>
        <p class="mt-2 text-3xl font-bold text-indigo-600 dark:text-indigo-400" id="entries-count">
          0
        </p>
      </div>
    </div>

    <!-- Time Tracker -->
    <div class="bg-white dark:bg-gray-800 shadow-sm rounded-lg p-6">
      <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-4">Track Time</h2>
      <form id="time-tracker-form" class="space-y-4">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label for="project" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Project
            </label>
            <select
              id="project"
              name="project"
              required
              class="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-700 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            >
              <option value="">Select a project</option>
            </select>
          </div>
          <div>
            <label for="description" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Description
            </label>
            <input
              type="text"
              id="description"
              name="description"
              required
              class="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-700 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
              placeholder="What are you working on?"
            />
          </div>
        </div>
        <div class="flex justify-end">
          <button
            type="submit"
            id="timer-button"
            class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            Start Timer
          </button>
        </div>
      </form>
    </div>

    <!-- Recent Time Entries -->
    <div class="bg-white dark:bg-gray-800 shadow-sm rounded-lg p-6">
      <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-4">Recent Entries</h2>
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
          <thead>
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                Project
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                Description
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                Duration
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                Date
              </th>
            </tr>
          </thead>
          <tbody id="time-entries" class="divide-y divide-gray-200 dark:divide-gray-700">
          </tbody>
        </table>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { addTimeEntry, getProjects, getTimeEntries, calculateTotalHours } from '../lib/db';

  let isTracking = false;
  let startTime: string | null = null;
  
  // DOM Elements
  const form = document.getElementById('time-tracker-form') as HTMLFormElement;
  const timerButton = document.getElementById('timer-button') as HTMLButtonElement;
  const projectSelect = document.getElementById('project') as HTMLSelectElement;
  const timeEntriesTable = document.getElementById('time-entries') as HTMLTableSectionElement;
  const totalHoursElement = document.getElementById('total-hours') as HTMLParagraphElement;
  const projectCountElement = document.getElementById('project-count') as HTMLParagraphElement;
  const entriesCountElement = document.getElementById('entries-count') as HTMLParagraphElement;

  // Load initial data
  async function loadData() {
    try {
      const [projects, timeEntries] = await Promise.all([getProjects(), getTimeEntries()]);
      const totalHours = calculateTotalHours(timeEntries);

      // Update stats
      totalHoursElement.textContent = totalHours.toFixed(2);
      projectCountElement.textContent = projects.length.toString();
      entriesCountElement.textContent = timeEntries.length.toString();

      // Update project select
      projectSelect.innerHTML = '<option value="">Select a project</option>' +
        projects.map(project => `<option value="${project.id}">${project.name}</option>`).join('');

      // Update time entries table
      timeEntriesTable.innerHTML = timeEntries.map(entry => {
        const project = projects.find(p => p.id === entry.projectId);
        const start = new Date(entry.startTime);
        const end = new Date(entry.endTime);
        const duration = ((end.getTime() - start.getTime()) / (1000 * 60 * 60)).toFixed(2);
        
        return `
          <tr>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
              ${project?.name || 'Unknown Project'}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
              ${entry.description}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
              ${duration} hours
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
              ${start.toLocaleDateString()}
            </td>
          </tr>
        `;
      }).join('');
    } catch (error) {
      console.error('Error loading data:', error);
    }
  }

  // Load initial data
  loadData();
  
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    if (!isTracking) {
      // Start tracking
      startTime = new Date().toISOString();
      isTracking = true;
      timerButton.textContent = 'Stop Timer';
      timerButton.classList.remove('bg-indigo-600', 'hover:bg-indigo-700');
      timerButton.classList.add('bg-red-600', 'hover:bg-red-700');
    } else {
      // Stop tracking and save entry
      const formData = new FormData(form);
      const projectId = formData.get('project') as string;
      const description = formData.get('description') as string;
      
      if (startTime && projectId && description) {
        const endTime = new Date().toISOString();
        
        try {
          await addTimeEntry({
            projectId,
            description,
            startTime,
            endTime,
            tags: []
          });
          
          // Reset form
          form.reset();
          startTime = null;
          isTracking = false;
          timerButton.textContent = 'Start Timer';
          timerButton.classList.remove('bg-red-600', 'hover:bg-red-700');
          timerButton.classList.add('bg-indigo-600', 'hover:bg-indigo-700');
          
          // Reload data
          await loadData();
        } catch (error) {
          console.error('Error saving time entry:', error);
        }
      }
    }
  });
</script>
