---
interface Props {
  id: string;
  title: string;
}

const { id, title } = Astro.props;
---

<div id={id} class="hidden fixed inset-0 bg-gray-500 bg-opacity-75 z-50">
  <div class="flex min-h-full items-center justify-center p-4">
    <div class="bg-white rounded-lg shadow-xl max-w-xl w-full p-6">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-lg font-medium text-gray-900">{title}</h3>
        <button class="modal-close text-gray-400 hover:text-gray-500">
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <div class="modal-content">
        <slot />
      </div>
    </div>
  </div>
</div>

<script define:vars={{ id }}>
  // Modal functionality
  const modal = document.getElementById(id);
  const closeButtons = modal?.querySelectorAll('.modal-close');
  
  closeButtons?.forEach(button => {
    button.addEventListener('click', () => {
      modal.classList.add('hidden');
    });
  });

  // Close on outside click
  modal?.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.classList.add('hidden');
    }
  });

  // Close on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !modal?.classList.contains('hidden')) {
      modal?.classList.add('hidden');
    }
  });
</script> 