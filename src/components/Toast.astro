---
interface Props {
  id: string;
  type: 'success' | 'error' | 'info' | 'warning';
  message: string;
}

const { id, type, message } = Astro.props;

const bgColors = {
  success: 'bg-green-500',
  error: 'bg-red-500',
  info: 'bg-blue-500',
  warning: 'bg-yellow-500'
};

const icons = {
  success: '✓',
  error: '✕',
  info: 'ℹ',
  warning: '⚠'
};
---

<div
  id={id}
  class={`fixed bottom-4 right-4 flex items-center p-4 mb-4 text-white rounded-lg shadow-lg ${bgColors[type]} transform transition-transform duration-300 translate-x-0`}
  role="alert"
>
  <div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 rounded-lg bg-white/25">
    <span class="text-xl">{icons[type]}</span>
  </div>
  <div class="ml-3 text-sm font-normal">{message}</div>
  <button
    type="button"
    class="ml-auto -mx-1.5 -my-1.5 rounded-lg focus:ring-2 focus:ring-white p-1.5 inline-flex items-center justify-center h-8 w-8 text-white/75 hover:text-white"
    data-dismiss-target={`#${id}`}
    aria-label="Close"
  >
    <span class="sr-only">Close</span>
    <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
      <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
    </svg>
  </button>
</div>

<script define:vars={{ id }}>
  const toast = document.getElementById(id);
  const closeButton = toast?.querySelector('button');
  
  const removeToast = () => {
    toast?.classList.add('translate-x-full');
    setTimeout(() => {
      toast?.remove();
    }, 300);
  };

  closeButton?.addEventListener('click', removeToast);

  // Auto remove after 5 seconds
  setTimeout(removeToast, 5000);
</script> 