---
import type { TimeEntry } from '../lib/supabase';

interface Props {
  entries: TimeEntry[];
}

const { entries } = Astro.props;

// Calculate statistics
const stats = entries.reduce((acc: {
  totalHours: number;
  totalEarnings: number;
  projectStats: Record<string, { hours: number; earnings: number; entries: number }>;
  dailyHours: Record<string, number>;
}, entry) => {
  const startTime = new Date(entry.start_time);
  const endTime = entry.end_time ? new Date(entry.end_time) : null;
  
  if (!endTime) return acc;
  
  const duration = (endTime.getTime() - startTime.getTime()) / (1000 * 60 * 60); // hours
  const earnings = entry.project?.rate_per_hour ? duration * entry.project.rate_per_hour : 0;

  // Total stats
  acc.totalHours += duration;
  acc.totalEarnings += earnings;
  
  // Per project stats
  if (entry.project?.name) {
    if (!acc.projectStats[entry.project.name]) {
      acc.projectStats[entry.project.name] = { hours: 0, earnings: 0, entries: 0 };
    }
    acc.projectStats[entry.project.name].hours += duration;
    acc.projectStats[entry.project.name].earnings += earnings;
    acc.projectStats[entry.project.name].entries += 1;
  }

  // Daily average
  const dayKey = startTime.toISOString().split('T')[0];
  if (!acc.dailyHours[dayKey]) {
    acc.dailyHours[dayKey] = 0;
  }
  acc.dailyHours[dayKey] += duration;

  return acc;
}, {
  totalHours: 0,
  totalEarnings: 0,
  projectStats: {},
  dailyHours: {},
});

// Calculate daily average (excluding days with 0 hours)
const activeDays = Object.values(stats.dailyHours).filter(hours => hours > 0).length;
const dailyAverage = activeDays > 0 ? stats.totalHours / activeDays : 0;

// Get top projects by hours
const topProjects = Object.entries(stats.projectStats)
  .sort(([, a], [, b]) => b.hours - a.hours)
  .slice(0, 3);

---

<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
  <!-- Total Hours -->
  <div class="bg-white rounded-lg shadow p-6 space-y-2">
    <h3 class="text-sm font-medium text-secondary-500">Total Hours</h3>
    <p class="text-2xl font-bold text-primary-600">{stats.totalHours.toFixed(1)}h</p>
  </div>

  <!-- Total Earnings -->
  <div class="bg-white rounded-lg shadow p-6 space-y-2">
    <h3 class="text-sm font-medium text-secondary-500">Total Earnings</h3>
    <p class="text-2xl font-bold text-green-600">${stats.totalEarnings.toFixed(2)}</p>
  </div>

  <!-- Daily Average -->
  <div class="bg-white rounded-lg shadow p-6 space-y-2">
    <h3 class="text-sm font-medium text-secondary-500">Daily Average</h3>
    <p class="text-2xl font-bold text-primary-600">{dailyAverage.toFixed(1)}h</p>
    <p class="text-xs text-secondary-400">Based on {activeDays} active days</p>
  </div>

  <!-- Active Projects -->
  <div class="bg-white rounded-lg shadow p-6 space-y-2">
    <h3 class="text-sm font-medium text-secondary-500">Active Projects</h3>
    <p class="text-2xl font-bold text-primary-600">{Object.keys(stats.projectStats).length}</p>
  </div>
</div>

<!-- Project Breakdown -->
<div class="bg-white rounded-lg shadow p-6 mb-8">
  <h3 class="text-lg font-medium text-secondary-700 mb-4">Top Projects</h3>
  <div class="space-y-4">
    {topProjects.map(([name, projectStats]) => (
      <div class="space-y-2">
        <div class="flex justify-between items-center">
          <span class="font-medium text-secondary-600">{name}</span>
          <span class="text-secondary-500">{projectStats.hours.toFixed(1)}h</span>
        </div>
        <div class="relative h-2 bg-gray-200 rounded-full overflow-hidden">
          <div 
            class="absolute top-0 left-0 h-full bg-primary-500 rounded-full"
            style={`width: ${(projectStats.hours / topProjects[0][1].hours * 100)}%`}
          />
        </div>
        <div class="flex justify-between text-xs text-secondary-400">
          <span>{projectStats.entries} entries</span>
          {projectStats.earnings > 0 && <span>${projectStats.earnings.toFixed(2)}</span>}
        </div>
      </div>
    ))}
  </div>
</div> 